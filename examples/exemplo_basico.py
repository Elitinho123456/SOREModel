"""
Exemplo simples de uso do SOREModel v2
Demonstra o uso b√°sico: tokenizer, modelo, treinamento e gera√ß√£o
"""

import sys
import os

# Adicionar src ao path para importar os m√≥dulos
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from src import SOREModel_v2, criar_tokenizer_basico, Trainer, TextGenerator


def main():
    """Fun√ß√£o principal do exemplo"""
    print("üöÄ Exemplo de uso do SOREModel v2")
    print("=" * 40)

    # 1. Preparar dados de treinamento
    print("\nüìö Preparando dados de treinamento...")
    tokenizer = criar_tokenizer_basico()

    textos_treinamento = [
        "ol√°, mundo!",
        "como voc√™ est√°?",
        "estou bem, obrigado!",
        "que bom ouvir isso!",
        "sim, muito bom!",
        "adeus, at√© logo!",
        "oi, tudo bem?",
        "tudo √≥timo!",
        "nos vemos em breve",
        "at√© a pr√≥xima!"
    ]

    print(f"‚úÖ Tokenizer criado com vocabul√°rio de {tokenizer.get_vocab_size()} caracteres")
    print(f"‚úÖ {len(textos_treinamento)} textos de treinamento preparados")

    # 2. Criar modelo
    print("\nüß† Criando modelo...")
    modelo = SOREModel_v2(
        tamanho_vocab=tokenizer.get_vocab_size(),
        dim_embed=64,                                                                           # Dimens√£o maior para melhor qualidade
        tamanho_contexto=16,                                                                    # Contexto maior
        num_heads=8,                                                                            # Mais cabe√ßas de aten√ß√£o
        num_layers=4                                                                            # Mais camadas
    )

    print("‚úÖ Modelo criado com sucesso!")
    print(f"   - Vocabul√°rio: {tokenizer.get_vocab_size()} tokens")
    print(f"   - Embedding: {64} dimens√µes")
    print(f"   - Contexto: {16} tokens")
    print(f"   - Aten√ß√£o: {8} cabe√ßas")
    print(f"   - Camadas: {4} blocos Transformer")

    # 3. Treinar modelo
    print("\nüéØ Iniciando treinamento...")
    trainer = Trainer(modelo, tokenizer)

    trainer.treinar(
        textos=textos_treinamento,
        contexto_tamanho=8,
        num_epocas=500,
        batch_size=4,
        learning_rate=0.001
    )

    print(f"‚úÖ Treinamento conclu√≠do! Perda final: {trainer.get_historico_perdas()[-1]:.4f}")
    # 4. Gerar texto
    print("\n‚úçÔ∏è  Gerando texto...")
    gerador = TextGenerator(modelo, tokenizer)

    # Testar diferentes contextos iniciais
    contextos_teste = ["ol√°", "oi", "como", "sim", "adeus"]

    for contexto in contextos_teste:
        texto_gerado = gerador.gerar_texto(
            contexto_inicial=contexto,
            max_length=15,
            temperature=0.8,                                                                    # Equil√≠brio entre criatividade e coer√™ncia
            top_p=0.9                                                                           # Nucleus sampling para qualidade
        )
        print(f"  '{contexto}' ‚Üí '{texto_gerado}'")

    # 5. Demonstrar ajuste fino
    print("\nüîß Testando ajuste fino...")
    novos_textos = [
        "python √© incr√≠vel!",
        "programa√ß√£o √© divertido",
        "c√≥digo limpo √© importante"
    ]

    trainer.ajustar_fino(
        textos_novos=novos_textos,
        contexto_tamanho=8,
        num_epocas=200
    )

    # Gerar com o modelo ajustado
    texto_programacao = gerador.gerar_texto("python", max_length=10, temperature=0.7)
    print(f"  Ap√≥s ajuste fino: '{texto_programacao}'")

    # 6. Salvar modelo
    print("\nüíæ Salvando modelo...")
    trainer.salvar_modelo("exemplo_soremodel.pth")
    print("‚úÖ Modelo salvo com sucesso!")

    print("\nüéâ Exemplo conclu√≠do com sucesso!")
    print("\nüìä Resumo:")
    print(f"   - Textos de treinamento: {len(textos_treinamento)}")
    print(f"   - Novos textos para ajuste: {len(novos_textos)}")
    print(f"   - √âpocas de treinamento: 500")
    print(f"   - √âpocas de ajuste fino: 200")
    print(f"   - Perda final: {trainer.get_historico_perdas()[-1]:.4f}")
    print("\nüí° Dicas:")
    print("   - Aumentar num_epocas para melhor qualidade")
    print("   - Experimentar diferentes temperaturas (0.5-1.2)")
    print("   - Usar mais dados para resultados melhores")


if __name__ == "__main__":
    main()
